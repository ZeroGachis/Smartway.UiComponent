<?xml version="1.0" encoding="utf-8" ?>
<ContentView xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:d="http://xamarin.com/schemas/2014/forms/design"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:layouts="clr-namespace:Smartway.UiComponent.Layouts;assembly=Smartway.UiComponent"
             xmlns:icons="clr-namespace:Smartway.UiComponent.Labels.Icons;assembly=Smartway.UiComponent"
             xmlns:resources="clr-namespace:Smartway.UiComponent.Resources;assembly=Smartway.UiComponent"
             mc:Ignorable="d"
             x:Class="Smartway.UiComponent.TopAppBar.TopAppBar"
             x:Name="Self">
    <ContentView.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <resources:Colors />
            </ResourceDictionary.MergedDictionaries>
            <Style x:Key="Icon" TargetType="icons:Icon">
                <Setter Property="HorizontalOptions" Value="Start"/>
                <Setter Property="VerticalOptions" Value="Center"/>
                <Setter Property="TextColor" Value="{StaticResource ZgDarkBlue}"/>
                <Setter Property="FontSize" Value="24"/>
                <Setter Property="Margin" Value="0, 0, 16, 0"/>
            </Style>
            <Style x:Key="LabelTitle" TargetType="Label" BasedOn="{StaticResource SemiBoldFont}">
                <Setter Property="FontSize" Value="20"/>
                <Setter Property="Margin" Value="16, 0, 0, 0"/>
                <Setter Property="HorizontalTextAlignment" Value="Start"/>
                <Setter Property="HorizontalOptions" Value="StartAndExpand"/>
                <Setter Property="VerticalTextAlignment" Value="Center"/>
                <Setter Property="LineBreakMode" Value="TailTruncation"/>
            </Style>
            <Style x:Key="ExtraLabel" TargetType="Label" BasedOn="{StaticResource SemiBoldFont}">
                <Setter Property="FontSize" Value="16"/>
                <Setter Property="VerticalTextAlignment" Value="Center"/>
                <Setter Property="Padding" Value="0, 1, 0, 0"/>
            </Style>
        </ResourceDictionary>
    </ContentView.Resources>
    <ContentView.Content>
        <Grid Padding="0, 3, 16, 5" ColumnSpacing="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="48" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <layouts:ClickableItem Padding="16, 0, 0, 0"
                                   TapCommand="{Binding Source={x:Reference Self}, Path=Command}">
                <icons:Icon Style="{StaticResource Icon}">
                    <icons:Icon.Triggers>
                        <DataTrigger TargetType="icons:Icon"
                         Binding="{Binding Source={x:Reference Self}, Path=Type}" Value="Default">
                            <Setter Property="Value" Value="ArrowBack"/>
                        </DataTrigger>
                        <DataTrigger TargetType="icons:Icon"
                         Binding="{Binding Source={x:Reference Self}, Path=Type}" Value="Modal">
                            <Setter Property="Value" Value="Close"/>
                        </DataTrigger>
                        <DataTrigger TargetType="icons:Icon"
                         Binding="{Binding Source={x:Reference Self}, Path=Type}" Value="Custom">
                            <Setter Property="Value" Value="{Binding Source={x:Reference Self}, Path=IconSource}"/>
                        </DataTrigger>
                        <MultiTrigger TargetType="icons:Icon">
                            <MultiTrigger.Conditions>
                                <BindingCondition Binding="{Binding Source={x:Reference Self}, Path=Type}" Value="Default" />
                                <BindingCondition Binding="{Binding Source={x:Reference Self}, Path=IsDarkTheme}" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Value" Value="ArrowBack"/>
                            <Setter Property="TextColor" Value="White"/>
                        </MultiTrigger>
                        <MultiTrigger TargetType="icons:Icon">
                            <MultiTrigger.Conditions>
                                <BindingCondition Binding="{Binding Source={x:Reference Self}, Path=Type}" Value="Modal" />
                                <BindingCondition Binding="{Binding Source={x:Reference Self}, Path=IsDarkTheme}" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Value" Value="Close"/>
                            <Setter Property="TextColor" Value="White"/>
                        </MultiTrigger>
                        <MultiTrigger TargetType="icons:Icon">
                            <MultiTrigger.Conditions>
                                <BindingCondition Binding="{Binding Source={x:Reference Self}, Path=Type}" Value="Custom" />
                                <BindingCondition Binding="{Binding Source={x:Reference Self}, Path=IsDarkTheme}" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Value" Value="{Binding Source={x:Reference Self}, Path=IconSource}"/>
                            <Setter Property="TextColor" Value="White"/>
                        </MultiTrigger>
                        <MultiTrigger TargetType="icons:Icon">
                            <MultiTrigger.Conditions>
                                <BindingCondition Binding="{Binding Source={x:Reference Self}, Path=Type}" Value="Custom" />
                                <BindingCondition Binding="{Binding Source={x:Reference Self}, Path=IconSource}" Value="{x:Null}" />
                            </MultiTrigger.Conditions>
                            <Setter Property="IsVisible" Value="False"/>
                        </MultiTrigger>
                        <MultiTrigger TargetType="icons:Icon">
                            <MultiTrigger.Conditions>
                                <BindingCondition Binding="{Binding Source={x:Reference Self}, Path=Type}" Value="Custom" />
                                <BindingCondition Binding="{Binding Source={x:Reference Self}, Path=IconSource}" Value="{x:Null}" />
                                <BindingCondition Binding="{Binding Source={x:Reference Self}, Path=IsDarkTheme}" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="IsVisible" Value="False"/>
                        </MultiTrigger>
                    </icons:Icon.Triggers>
                </icons:Icon>
                <layouts:ClickableItem.Triggers>
                    <MultiTrigger TargetType="layouts:ClickableItem">
                        <MultiTrigger.Conditions>
                            <BindingCondition Binding="{Binding Source={x:Reference Self}, Path=Type}" Value="Custom" />
                            <BindingCondition Binding="{Binding Source={x:Reference Self}, Path=IconSource}" Value="{x:Null}" />
                        </MultiTrigger.Conditions>
                        <Setter Property="IsVisible" Value="False"/>
                    </MultiTrigger>
                    <MultiTrigger TargetType="layouts:ClickableItem">
                        <MultiTrigger.Conditions>
                            <BindingCondition Binding="{Binding Source={x:Reference Self}, Path=Type}" Value="Custom" />
                            <BindingCondition Binding="{Binding Source={x:Reference Self}, Path=IconSource}" Value="{x:Null}" />
                            <BindingCondition Binding="{Binding Source={x:Reference Self}, Path=IsDarkTheme}" Value="true" />
                        </MultiTrigger.Conditions>
                        <Setter Property="IsVisible" Value="False"/>
                    </MultiTrigger>
                </layouts:ClickableItem.Triggers>
            </layouts:ClickableItem>
            <Label Grid.Column="1"
                   Style="{StaticResource LabelTitle}"
                   Text="{Binding Source={x:Reference Self}, Path=Title}"/>
            <Label Grid.Column="2"
                       Style="{StaticResource ExtraLabel}"
                       Text="{Binding Source={x:Reference Self}, Path=ExtraNavigationLabel}">
                <Label.Triggers>
                    <DataTrigger TargetType="Label"
                                     Binding="{Binding Source={x:Reference Self}, Path=ExtraNavigationLabel}" Value="">
                        <Setter Property="IsVisible" Value="False"/>
                    </DataTrigger>
                </Label.Triggers>
                <Label.GestureRecognizers>
                    <TapGestureRecognizer
                        Command="{Binding Source={x:Reference Self}, Path=ExtraNavigationCommand}"/>
                </Label.GestureRecognizers>
            </Label>
        </Grid>
    </ContentView.Content>
</ContentView>
